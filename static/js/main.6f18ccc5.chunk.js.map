{"version":3,"sources":["Title.js","Card.js","Selection.js","serviceWorker.js","index.js"],"names":["Title","className","React","Component","Card","props","this","level","title","desc","Selection","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAgBeA,E,uKAZZ,OACA,yBAAKC,UAAU,SACd,6BACC,oEACA,wBAAIA,UAAU,QAAd,2BACA,2DACA,iF,GAReC,IAAMC,WCmBXC,E,kDAlBd,WAAYC,GAAO,IAAD,8BACjB,gBACKA,MAAQA,EAFI,E,qDAMhB,OACA,yBAAKJ,UAAU,QACd,6BACC,wBAAIA,UAAU,SAASK,KAAKD,MAAME,QAEnC,4BAAKD,KAAKD,MAAMG,OACjB,2BAAIF,KAAKD,MAAMI,MACf,4BAAQR,UAAU,gBAAlB,Y,GAdgBC,IAAMC,WCoBVO,E,uKAZZ,OACA,yBAAKT,UAAU,iBACd,yBAAKA,UAAU,kBACb,IAAIG,EARU,CAACG,MAAO,OAAQC,MAAO,kBAAmBC,KAAM,0EAQ1CE,SACpB,IAAIP,EARW,CAACG,MAAO,OAAQC,MAAO,aAAcC,KAAM,iEAQrCE,SACrB,IAAIP,EARU,CAACG,MAAO,OAAQC,MAAO,aAAcC,KAAM,sEAQrCE,SACpB,IAAIP,EARS,CAACG,MAAO,OAAQC,MAAO,WAAYC,KAAM,8DAQnCE,e,GAbDT,IAAMC,WCSVS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6f18ccc5.chunk.js","sourcesContent":["import React from 'react';\n\nclass Title extends React.Component {\n render() {\n   return (\n   <div className='title'>\n    <div>\n     <h4>Interactive Graphics Final Project: </h4>\n     <h1 className='glow'>Low poly robots attack!</h1>\n     <h5>Sapienza University of Rome</h5>\n     <h6>Authors: Sergio Picca and Andrea Napoletani</h6>\n    </div>\n   </div>)\n }\n}\n\nexport default Title;","import React from 'react';\n\nclass Card extends React.Component {\n constructor(props){\n  super()\n  this.props = props\n }\n \n render() {\n   return (\n   <div className='card'>\n    <div>\n     <h1 className='level'>{this.props.level}</h1>\n    </div>\n    <h3>{this.props.title}</h3>\n   <p>{this.props.desc}</p>\n   <button className='access-level'>GO!</button>\n   </div>)\n }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nclass Selection extends React.Component {\n render() {\n  const firstCard = {level: 'LVL1', title: 'Game and models', desc: 'Take a look on what is the logic of the and how the  models are made!'}\n  const secondCard = {level: 'LVL3', title: 'Technology', desc: 'Read about the technology used and some of the requirements.'}\n  const thirdCard = {level: 'LVL3', title: 'Animations', desc: 'Discover how we implemented the animations of all the characters.'}\n  const playCard = {level: 'PLAY', title: 'No title', desc: 'Enjoy the game  kill all the Robots and be  the champion!'}\n\n   return (\n   <div className=\"lvl-selection\">\n    <div className=\"card-container\">\n     {new Card(firstCard).render()}\n     {new Card(secondCard).render()}\n     {new Card(thirdCard).render()}\n     {new Card(playCard).render()}\n    </div>\n   </div>)\n }\n}\n\nexport default Selection;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Title from  './Title'\nimport Selection from './Selection'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Title />\n    <Selection />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}